
syntax = "proto3";
package api;
option go_package = "/apiproto";

import "google/protobuf/timestamp.proto";

message Event {
  google.protobuf.Timestamp timestamp = 1; // timestamp when event is recorded at collector
  string agent_id = 2; // some unique id of the collector
  string tag = 3; // event tag i.e. cpu, mem etc.
  string message = 4; // encrypted message 
  string UserID = 5; // Id of the user to which this event belongs to 
  string AccessKey = 6; // Access key for agent, it is obtained from ingester and used for mapping collector agent 
}

message AccessKey {
  string AccessKey = 1; // Access key for agent, it is obtained from ingester and used for mapping collector agent 
}

message Config {
  string AccessKey = 1; // Access key for agent, it is obtained from ingester and used for mapping collector agent 
  string AccessToken = 2; // Access token to perform authentication while sending events
  string EncryptionKey = 3; // Encrypt messages if aes encyption key is provided
  string UserID = 4; // Id of the user 
}

enum EventCode {
    SUCCESS = 0; 
    FAILURE = 1;
}

message EResponse {
  EventCode status = 1;
}

service EventService {
  rpc SendEvent(stream Event) returns (EResponse) {};
  rpc ExchangeConfig (AccessKey) returns (Config) {}
}